/* soapUserServiceSoapBindingObject.h
   Generated by gSOAP 2.8.3 from ../userservice.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapUserServiceSoapBindingObject_H
#define soapUserServiceSoapBindingObject_H
#include "soapH.h"

/******************************************************************************\
 *                                                                            *
 * Service Object                                                             *
 *                                                                            *
\******************************************************************************/

class UserServiceSoapBindingService : public soap
{    public:
	UserServiceSoapBindingService()
	{ static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://localhost:9000/userservice.wsdl", NULL, NULL},
	{"ns2", "http://localhost:9000/userservice.xsd", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};

	this->namespaces = namespaces; };
	virtual ~UserServiceSoapBindingService() { };
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog) { return soap_bind(this, host, port, backlog); };
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept() { return soap_accept(this); };
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve() { return soap_serve(this); };
};

/******************************************************************************\
 *                                                                            *
 * Service Operations (you should define these globally)                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetUserInfo(struct soap*, _ns2__UserInfoRequest *ns2__UserInfoRequest, _ns2__UserInfo *ns2__UserInfo);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DeleteUser(struct soap*, _ns2__UserDeletionRequest *ns2__UserDeletionRequest, _ns2__UserDeletionResponse *ns2__UserDeletionResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateUser(struct soap*, _ns2__UserCreationRequest *ns2__UserCreationRequest, _ns2__UserCreationResponse *ns2__UserCreationResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateGroup(struct soap*, _ns2__GroupCreationRequest *ns2__GroupCreationRequest, _ns2__GroupCreationResponse *ns2__GroupCreationResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DeleteGroup(struct soap*, _ns2__GroupDeletionRequest *ns2__GroupDeletionRequest, _ns2__GroupDeletionResponse *ns2__GroupDeletionResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__GroupAddUser(struct soap*, _ns2__GroupAddUserRequest *ns2__GroupAddUserRequest, _ns2__GroupAddUserResponse *ns2__GroupAddUserResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__GroupDeleteUser(struct soap*, _ns2__GroupDeleteUserRequest *ns2__GroupDeleteUserRequest, _ns2__GroupDeleteUserResponse *ns2__GroupDeleteUserResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetGroupInfo(struct soap*, _ns2__GroupInfoRequest *ns2__GroupInfoRequest, _ns2__GroupInfoResponse *ns2__GroupInfoResponse);

#endif

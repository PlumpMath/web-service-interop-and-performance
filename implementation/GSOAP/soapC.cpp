/* soapC.cpp
   Generated by gSOAP 2.8.3 from ../userservice.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.3 2012-06-24 15:34:52 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_xsd__integer:
		return soap_in_xsd__integer(soap, NULL, NULL, "xsd:integer");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_ns2__GroupInfoResponse:
		return soap_in_PointerTo_ns2__GroupInfoResponse(soap, NULL, NULL, "ns2:GroupInfoResponse");
	case SOAP_TYPE_PointerTo_ns2__GroupInfoRequest:
		return soap_in_PointerTo_ns2__GroupInfoRequest(soap, NULL, NULL, "ns2:GroupInfoRequest");
	case SOAP_TYPE_PointerTo_ns2__GroupDeleteUserResponse:
		return soap_in_PointerTo_ns2__GroupDeleteUserResponse(soap, NULL, NULL, "ns2:GroupDeleteUserResponse");
	case SOAP_TYPE_PointerTo_ns2__GroupDeleteUserRequest:
		return soap_in_PointerTo_ns2__GroupDeleteUserRequest(soap, NULL, NULL, "ns2:GroupDeleteUserRequest");
	case SOAP_TYPE_PointerTo_ns2__GroupAddUserResponse:
		return soap_in_PointerTo_ns2__GroupAddUserResponse(soap, NULL, NULL, "ns2:GroupAddUserResponse");
	case SOAP_TYPE_PointerTo_ns2__GroupAddUserRequest:
		return soap_in_PointerTo_ns2__GroupAddUserRequest(soap, NULL, NULL, "ns2:GroupAddUserRequest");
	case SOAP_TYPE_PointerTo_ns2__GroupDeletionResponse:
		return soap_in_PointerTo_ns2__GroupDeletionResponse(soap, NULL, NULL, "ns2:GroupDeletionResponse");
	case SOAP_TYPE_PointerTo_ns2__GroupDeletionRequest:
		return soap_in_PointerTo_ns2__GroupDeletionRequest(soap, NULL, NULL, "ns2:GroupDeletionRequest");
	case SOAP_TYPE_PointerTo_ns2__GroupCreationResponse:
		return soap_in_PointerTo_ns2__GroupCreationResponse(soap, NULL, NULL, "ns2:GroupCreationResponse");
	case SOAP_TYPE_PointerTo_ns2__GroupCreationRequest:
		return soap_in_PointerTo_ns2__GroupCreationRequest(soap, NULL, NULL, "ns2:GroupCreationRequest");
	case SOAP_TYPE_PointerTo_ns2__UserCreationResponse:
		return soap_in_PointerTo_ns2__UserCreationResponse(soap, NULL, NULL, "ns2:UserCreationResponse");
	case SOAP_TYPE_PointerTo_ns2__UserCreationRequest:
		return soap_in_PointerTo_ns2__UserCreationRequest(soap, NULL, NULL, "ns2:UserCreationRequest");
	case SOAP_TYPE_PointerTo_ns2__UserDeletionResponse:
		return soap_in_PointerTo_ns2__UserDeletionResponse(soap, NULL, NULL, "ns2:UserDeletionResponse");
	case SOAP_TYPE_PointerTo_ns2__UserDeletionRequest:
		return soap_in_PointerTo_ns2__UserDeletionRequest(soap, NULL, NULL, "ns2:UserDeletionRequest");
	case SOAP_TYPE_PointerTo_ns2__UserInfo:
		return soap_in_PointerTo_ns2__UserInfo(soap, NULL, NULL, "ns2:UserInfo");
	case SOAP_TYPE_PointerTo_ns2__UserInfoRequest:
		return soap_in_PointerTo_ns2__UserInfoRequest(soap, NULL, NULL, "ns2:UserInfoRequest");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:integer"))
		{	*type = SOAP_TYPE_xsd__integer;
			return soap_in_xsd__integer(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns2:GroupInfoResponse"))
		{	*type = SOAP_TYPE__ns2__GroupInfoResponse;
			return soap_in__ns2__GroupInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:GroupInfoRequest"))
		{	*type = SOAP_TYPE__ns2__GroupInfoRequest;
			return soap_in__ns2__GroupInfoRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:GroupDeleteUserResponse"))
		{	*type = SOAP_TYPE__ns2__GroupDeleteUserResponse;
			return soap_in__ns2__GroupDeleteUserResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:GroupDeleteUserRequest"))
		{	*type = SOAP_TYPE__ns2__GroupDeleteUserRequest;
			return soap_in__ns2__GroupDeleteUserRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:GroupAddUserResponse"))
		{	*type = SOAP_TYPE__ns2__GroupAddUserResponse;
			return soap_in__ns2__GroupAddUserResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:GroupAddUserRequest"))
		{	*type = SOAP_TYPE__ns2__GroupAddUserRequest;
			return soap_in__ns2__GroupAddUserRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:GroupDeletionResponse"))
		{	*type = SOAP_TYPE__ns2__GroupDeletionResponse;
			return soap_in__ns2__GroupDeletionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:GroupDeletionRequest"))
		{	*type = SOAP_TYPE__ns2__GroupDeletionRequest;
			return soap_in__ns2__GroupDeletionRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:GroupCreationResponse"))
		{	*type = SOAP_TYPE__ns2__GroupCreationResponse;
			return soap_in__ns2__GroupCreationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:GroupCreationRequest"))
		{	*type = SOAP_TYPE__ns2__GroupCreationRequest;
			return soap_in__ns2__GroupCreationRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:UserCreationResponse"))
		{	*type = SOAP_TYPE__ns2__UserCreationResponse;
			return soap_in__ns2__UserCreationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:UserCreationRequest"))
		{	*type = SOAP_TYPE__ns2__UserCreationRequest;
			return soap_in__ns2__UserCreationRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:UserDeletionResponse"))
		{	*type = SOAP_TYPE__ns2__UserDeletionResponse;
			return soap_in__ns2__UserDeletionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:UserDeletionRequest"))
		{	*type = SOAP_TYPE__ns2__UserDeletionRequest;
			return soap_in__ns2__UserDeletionRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:UserInfo"))
		{	*type = SOAP_TYPE__ns2__UserInfo;
			return soap_in__ns2__UserInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:UserInfoRequest"))
		{	*type = SOAP_TYPE__ns2__UserInfoRequest;
			return soap_in__ns2__UserInfoRequest(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE__ns2__GroupInfoResponse:
		return ((_ns2__GroupInfoResponse *)ptr)->soap_out(soap, "ns2:GroupInfoResponse", id, NULL);
	case SOAP_TYPE__ns2__GroupInfoRequest:
		return ((_ns2__GroupInfoRequest *)ptr)->soap_out(soap, "ns2:GroupInfoRequest", id, NULL);
	case SOAP_TYPE__ns2__GroupDeleteUserResponse:
		return ((_ns2__GroupDeleteUserResponse *)ptr)->soap_out(soap, "ns2:GroupDeleteUserResponse", id, NULL);
	case SOAP_TYPE__ns2__GroupDeleteUserRequest:
		return ((_ns2__GroupDeleteUserRequest *)ptr)->soap_out(soap, "ns2:GroupDeleteUserRequest", id, NULL);
	case SOAP_TYPE__ns2__GroupAddUserResponse:
		return ((_ns2__GroupAddUserResponse *)ptr)->soap_out(soap, "ns2:GroupAddUserResponse", id, NULL);
	case SOAP_TYPE__ns2__GroupAddUserRequest:
		return ((_ns2__GroupAddUserRequest *)ptr)->soap_out(soap, "ns2:GroupAddUserRequest", id, NULL);
	case SOAP_TYPE__ns2__GroupDeletionResponse:
		return ((_ns2__GroupDeletionResponse *)ptr)->soap_out(soap, "ns2:GroupDeletionResponse", id, NULL);
	case SOAP_TYPE__ns2__GroupDeletionRequest:
		return ((_ns2__GroupDeletionRequest *)ptr)->soap_out(soap, "ns2:GroupDeletionRequest", id, NULL);
	case SOAP_TYPE__ns2__GroupCreationResponse:
		return ((_ns2__GroupCreationResponse *)ptr)->soap_out(soap, "ns2:GroupCreationResponse", id, NULL);
	case SOAP_TYPE__ns2__GroupCreationRequest:
		return ((_ns2__GroupCreationRequest *)ptr)->soap_out(soap, "ns2:GroupCreationRequest", id, NULL);
	case SOAP_TYPE__ns2__UserCreationResponse:
		return ((_ns2__UserCreationResponse *)ptr)->soap_out(soap, "ns2:UserCreationResponse", id, NULL);
	case SOAP_TYPE__ns2__UserCreationRequest:
		return ((_ns2__UserCreationRequest *)ptr)->soap_out(soap, "ns2:UserCreationRequest", id, NULL);
	case SOAP_TYPE__ns2__UserDeletionResponse:
		return ((_ns2__UserDeletionResponse *)ptr)->soap_out(soap, "ns2:UserDeletionResponse", id, NULL);
	case SOAP_TYPE__ns2__UserDeletionRequest:
		return ((_ns2__UserDeletionRequest *)ptr)->soap_out(soap, "ns2:UserDeletionRequest", id, NULL);
	case SOAP_TYPE__ns2__UserInfo:
		return ((_ns2__UserInfo *)ptr)->soap_out(soap, "ns2:UserInfo", id, NULL);
	case SOAP_TYPE__ns2__UserInfoRequest:
		return ((_ns2__UserInfoRequest *)ptr)->soap_out(soap, "ns2:UserInfoRequest", id, NULL);
	case SOAP_TYPE_xsd__integer:
		return soap_out_xsd__integer(soap, tag, id, (const std::string *)ptr, "xsd:integer");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_PointerTo_ns2__GroupInfoResponse:
		return soap_out_PointerTo_ns2__GroupInfoResponse(soap, tag, id, (_ns2__GroupInfoResponse *const*)ptr, "ns2:GroupInfoResponse");
	case SOAP_TYPE_PointerTo_ns2__GroupInfoRequest:
		return soap_out_PointerTo_ns2__GroupInfoRequest(soap, tag, id, (_ns2__GroupInfoRequest *const*)ptr, "ns2:GroupInfoRequest");
	case SOAP_TYPE_PointerTo_ns2__GroupDeleteUserResponse:
		return soap_out_PointerTo_ns2__GroupDeleteUserResponse(soap, tag, id, (_ns2__GroupDeleteUserResponse *const*)ptr, "ns2:GroupDeleteUserResponse");
	case SOAP_TYPE_PointerTo_ns2__GroupDeleteUserRequest:
		return soap_out_PointerTo_ns2__GroupDeleteUserRequest(soap, tag, id, (_ns2__GroupDeleteUserRequest *const*)ptr, "ns2:GroupDeleteUserRequest");
	case SOAP_TYPE_PointerTo_ns2__GroupAddUserResponse:
		return soap_out_PointerTo_ns2__GroupAddUserResponse(soap, tag, id, (_ns2__GroupAddUserResponse *const*)ptr, "ns2:GroupAddUserResponse");
	case SOAP_TYPE_PointerTo_ns2__GroupAddUserRequest:
		return soap_out_PointerTo_ns2__GroupAddUserRequest(soap, tag, id, (_ns2__GroupAddUserRequest *const*)ptr, "ns2:GroupAddUserRequest");
	case SOAP_TYPE_PointerTo_ns2__GroupDeletionResponse:
		return soap_out_PointerTo_ns2__GroupDeletionResponse(soap, tag, id, (_ns2__GroupDeletionResponse *const*)ptr, "ns2:GroupDeletionResponse");
	case SOAP_TYPE_PointerTo_ns2__GroupDeletionRequest:
		return soap_out_PointerTo_ns2__GroupDeletionRequest(soap, tag, id, (_ns2__GroupDeletionRequest *const*)ptr, "ns2:GroupDeletionRequest");
	case SOAP_TYPE_PointerTo_ns2__GroupCreationResponse:
		return soap_out_PointerTo_ns2__GroupCreationResponse(soap, tag, id, (_ns2__GroupCreationResponse *const*)ptr, "ns2:GroupCreationResponse");
	case SOAP_TYPE_PointerTo_ns2__GroupCreationRequest:
		return soap_out_PointerTo_ns2__GroupCreationRequest(soap, tag, id, (_ns2__GroupCreationRequest *const*)ptr, "ns2:GroupCreationRequest");
	case SOAP_TYPE_PointerTo_ns2__UserCreationResponse:
		return soap_out_PointerTo_ns2__UserCreationResponse(soap, tag, id, (_ns2__UserCreationResponse *const*)ptr, "ns2:UserCreationResponse");
	case SOAP_TYPE_PointerTo_ns2__UserCreationRequest:
		return soap_out_PointerTo_ns2__UserCreationRequest(soap, tag, id, (_ns2__UserCreationRequest *const*)ptr, "ns2:UserCreationRequest");
	case SOAP_TYPE_PointerTo_ns2__UserDeletionResponse:
		return soap_out_PointerTo_ns2__UserDeletionResponse(soap, tag, id, (_ns2__UserDeletionResponse *const*)ptr, "ns2:UserDeletionResponse");
	case SOAP_TYPE_PointerTo_ns2__UserDeletionRequest:
		return soap_out_PointerTo_ns2__UserDeletionRequest(soap, tag, id, (_ns2__UserDeletionRequest *const*)ptr, "ns2:UserDeletionRequest");
	case SOAP_TYPE_PointerTo_ns2__UserInfo:
		return soap_out_PointerTo_ns2__UserInfo(soap, tag, id, (_ns2__UserInfo *const*)ptr, "ns2:UserInfo");
	case SOAP_TYPE_PointerTo_ns2__UserInfoRequest:
		return soap_out_PointerTo_ns2__UserInfoRequest(soap, tag, id, (_ns2__UserInfoRequest *const*)ptr, "ns2:UserInfoRequest");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns2__GroupInfoResponse:
		((_ns2__GroupInfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__GroupInfoRequest:
		((_ns2__GroupInfoRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__GroupDeleteUserResponse:
		((_ns2__GroupDeleteUserResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__GroupDeleteUserRequest:
		((_ns2__GroupDeleteUserRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__GroupAddUserResponse:
		((_ns2__GroupAddUserResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__GroupAddUserRequest:
		((_ns2__GroupAddUserRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__GroupDeletionResponse:
		((_ns2__GroupDeletionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__GroupDeletionRequest:
		((_ns2__GroupDeletionRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__GroupCreationResponse:
		((_ns2__GroupCreationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__GroupCreationRequest:
		((_ns2__GroupCreationRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__UserCreationResponse:
		((_ns2__UserCreationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__UserCreationRequest:
		((_ns2__UserCreationRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__UserDeletionResponse:
		((_ns2__UserDeletionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__UserDeletionRequest:
		((_ns2__UserDeletionRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__UserInfo:
		((_ns2__UserInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__UserInfoRequest:
		((_ns2__UserInfoRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__integer:
		soap_serialize_xsd__integer(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE___ns1__GetGroupInfo:
		soap_serialize___ns1__GetGroupInfo(soap, (const struct __ns1__GetGroupInfo *)ptr);
		break;
	case SOAP_TYPE___ns1__GroupDeleteUser:
		soap_serialize___ns1__GroupDeleteUser(soap, (const struct __ns1__GroupDeleteUser *)ptr);
		break;
	case SOAP_TYPE___ns1__GroupAddUser:
		soap_serialize___ns1__GroupAddUser(soap, (const struct __ns1__GroupAddUser *)ptr);
		break;
	case SOAP_TYPE___ns1__DeleteGroup:
		soap_serialize___ns1__DeleteGroup(soap, (const struct __ns1__DeleteGroup *)ptr);
		break;
	case SOAP_TYPE___ns1__CreateGroup:
		soap_serialize___ns1__CreateGroup(soap, (const struct __ns1__CreateGroup *)ptr);
		break;
	case SOAP_TYPE___ns1__CreateUser:
		soap_serialize___ns1__CreateUser(soap, (const struct __ns1__CreateUser *)ptr);
		break;
	case SOAP_TYPE___ns1__DeleteUser:
		soap_serialize___ns1__DeleteUser(soap, (const struct __ns1__DeleteUser *)ptr);
		break;
	case SOAP_TYPE___ns1__GetUserInfo:
		soap_serialize___ns1__GetUserInfo(soap, (const struct __ns1__GetUserInfo *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__GroupInfoResponse:
		soap_serialize_PointerTo_ns2__GroupInfoResponse(soap, (_ns2__GroupInfoResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__GroupInfoRequest:
		soap_serialize_PointerTo_ns2__GroupInfoRequest(soap, (_ns2__GroupInfoRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__GroupDeleteUserResponse:
		soap_serialize_PointerTo_ns2__GroupDeleteUserResponse(soap, (_ns2__GroupDeleteUserResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__GroupDeleteUserRequest:
		soap_serialize_PointerTo_ns2__GroupDeleteUserRequest(soap, (_ns2__GroupDeleteUserRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__GroupAddUserResponse:
		soap_serialize_PointerTo_ns2__GroupAddUserResponse(soap, (_ns2__GroupAddUserResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__GroupAddUserRequest:
		soap_serialize_PointerTo_ns2__GroupAddUserRequest(soap, (_ns2__GroupAddUserRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__GroupDeletionResponse:
		soap_serialize_PointerTo_ns2__GroupDeletionResponse(soap, (_ns2__GroupDeletionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__GroupDeletionRequest:
		soap_serialize_PointerTo_ns2__GroupDeletionRequest(soap, (_ns2__GroupDeletionRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__GroupCreationResponse:
		soap_serialize_PointerTo_ns2__GroupCreationResponse(soap, (_ns2__GroupCreationResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__GroupCreationRequest:
		soap_serialize_PointerTo_ns2__GroupCreationRequest(soap, (_ns2__GroupCreationRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__UserCreationResponse:
		soap_serialize_PointerTo_ns2__UserCreationResponse(soap, (_ns2__UserCreationResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__UserCreationRequest:
		soap_serialize_PointerTo_ns2__UserCreationRequest(soap, (_ns2__UserCreationRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__UserDeletionResponse:
		soap_serialize_PointerTo_ns2__UserDeletionResponse(soap, (_ns2__UserDeletionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__UserDeletionRequest:
		soap_serialize_PointerTo_ns2__UserDeletionRequest(soap, (_ns2__UserDeletionRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__UserInfo:
		soap_serialize_PointerTo_ns2__UserInfo(soap, (_ns2__UserInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__UserInfoRequest:
		soap_serialize_PointerTo_ns2__UserInfoRequest(soap, (_ns2__UserInfoRequest *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__UserInfoRequest:
		return (void*)soap_instantiate__ns2__UserInfoRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__UserInfo:
		return (void*)soap_instantiate__ns2__UserInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__UserDeletionRequest:
		return (void*)soap_instantiate__ns2__UserDeletionRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__UserDeletionResponse:
		return (void*)soap_instantiate__ns2__UserDeletionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__UserCreationRequest:
		return (void*)soap_instantiate__ns2__UserCreationRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__UserCreationResponse:
		return (void*)soap_instantiate__ns2__UserCreationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__GroupCreationRequest:
		return (void*)soap_instantiate__ns2__GroupCreationRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__GroupCreationResponse:
		return (void*)soap_instantiate__ns2__GroupCreationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__GroupDeletionRequest:
		return (void*)soap_instantiate__ns2__GroupDeletionRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__GroupDeletionResponse:
		return (void*)soap_instantiate__ns2__GroupDeletionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__GroupAddUserRequest:
		return (void*)soap_instantiate__ns2__GroupAddUserRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__GroupAddUserResponse:
		return (void*)soap_instantiate__ns2__GroupAddUserResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__GroupDeleteUserRequest:
		return (void*)soap_instantiate__ns2__GroupDeleteUserRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__GroupDeleteUserResponse:
		return (void*)soap_instantiate__ns2__GroupDeleteUserResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__GroupInfoRequest:
		return (void*)soap_instantiate__ns2__GroupInfoRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__GroupInfoResponse:
		return (void*)soap_instantiate__ns2__GroupInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetUserInfo:
		return (void*)soap_instantiate___ns1__GetUserInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__DeleteUser:
		return (void*)soap_instantiate___ns1__DeleteUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CreateUser:
		return (void*)soap_instantiate___ns1__CreateUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CreateGroup:
		return (void*)soap_instantiate___ns1__CreateGroup(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__DeleteGroup:
		return (void*)soap_instantiate___ns1__DeleteGroup(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GroupAddUser:
		return (void*)soap_instantiate___ns1__GroupAddUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GroupDeleteUser:
		return (void*)soap_instantiate___ns1__GroupDeleteUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetGroupInfo:
		return (void*)soap_instantiate___ns1__GetGroupInfo(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__integer:
		return (void*)soap_instantiate_xsd__integer(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE__ns2__UserInfoRequest:
		if (p->size < 0)
			SOAP_DELETE((_ns2__UserInfoRequest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns2__UserInfoRequest*)p->ptr);
		break;
	case SOAP_TYPE__ns2__UserInfo:
		if (p->size < 0)
			SOAP_DELETE((_ns2__UserInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns2__UserInfo*)p->ptr);
		break;
	case SOAP_TYPE__ns2__UserDeletionRequest:
		if (p->size < 0)
			SOAP_DELETE((_ns2__UserDeletionRequest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns2__UserDeletionRequest*)p->ptr);
		break;
	case SOAP_TYPE__ns2__UserDeletionResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns2__UserDeletionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns2__UserDeletionResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns2__UserCreationRequest:
		if (p->size < 0)
			SOAP_DELETE((_ns2__UserCreationRequest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns2__UserCreationRequest*)p->ptr);
		break;
	case SOAP_TYPE__ns2__UserCreationResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns2__UserCreationResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns2__UserCreationResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns2__GroupCreationRequest:
		if (p->size < 0)
			SOAP_DELETE((_ns2__GroupCreationRequest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns2__GroupCreationRequest*)p->ptr);
		break;
	case SOAP_TYPE__ns2__GroupCreationResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns2__GroupCreationResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns2__GroupCreationResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns2__GroupDeletionRequest:
		if (p->size < 0)
			SOAP_DELETE((_ns2__GroupDeletionRequest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns2__GroupDeletionRequest*)p->ptr);
		break;
	case SOAP_TYPE__ns2__GroupDeletionResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns2__GroupDeletionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns2__GroupDeletionResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns2__GroupAddUserRequest:
		if (p->size < 0)
			SOAP_DELETE((_ns2__GroupAddUserRequest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns2__GroupAddUserRequest*)p->ptr);
		break;
	case SOAP_TYPE__ns2__GroupAddUserResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns2__GroupAddUserResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns2__GroupAddUserResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns2__GroupDeleteUserRequest:
		if (p->size < 0)
			SOAP_DELETE((_ns2__GroupDeleteUserRequest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns2__GroupDeleteUserRequest*)p->ptr);
		break;
	case SOAP_TYPE__ns2__GroupDeleteUserResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns2__GroupDeleteUserResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns2__GroupDeleteUserResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns2__GroupInfoRequest:
		if (p->size < 0)
			SOAP_DELETE((_ns2__GroupInfoRequest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns2__GroupInfoRequest*)p->ptr);
		break;
	case SOAP_TYPE__ns2__GroupInfoResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns2__GroupInfoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns2__GroupInfoResponse*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetUserInfo:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetUserInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetUserInfo*)p->ptr);
		break;
	case SOAP_TYPE___ns1__DeleteUser:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__DeleteUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__DeleteUser*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CreateUser:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CreateUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CreateUser*)p->ptr);
		break;
	case SOAP_TYPE___ns1__CreateGroup:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__CreateGroup*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__CreateGroup*)p->ptr);
		break;
	case SOAP_TYPE___ns1__DeleteGroup:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__DeleteGroup*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__DeleteGroup*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GroupAddUser:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GroupAddUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GroupAddUser*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GroupDeleteUser:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GroupDeleteUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GroupDeleteUser*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetGroupInfo:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetGroupInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetGroupInfo*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_xsd__integer:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			SOAP_DELETE((std::vector<std::string >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<std::string >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<std::string >*)p)[len] = *(std::string *)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns2__GroupInfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfstd__string(soap, &this->_ns2__GroupInfoResponse::userlist);
	/* transient soap skipped */
}

void _ns2__GroupInfoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->_ns2__GroupInfoResponse::userlist);
	/* transient soap skipped */
}

int _ns2__GroupInfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__GroupInfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GroupInfoResponse(struct soap *soap, const char *tag, int id, const _ns2__GroupInfoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__GroupInfoResponse), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "userlist", -1, &(a->_ns2__GroupInfoResponse::userlist), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns2__GroupInfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__GroupInfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__GroupInfoResponse * SOAP_FMAC4 soap_in__ns2__GroupInfoResponse(struct soap *soap, const char *tag, _ns2__GroupInfoResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__GroupInfoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__GroupInfoResponse, sizeof(_ns2__GroupInfoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__GroupInfoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__GroupInfoResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfstd__string(soap, "userlist", &(a->_ns2__GroupInfoResponse::userlist), "xsd:string"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__GroupInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__GroupInfoResponse, 0, sizeof(_ns2__GroupInfoResponse), 0, soap_copy__ns2__GroupInfoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns2__GroupInfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__GroupInfoResponse);
	if (this->soap_out(soap, tag?tag:"ns2:GroupInfoResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__GroupInfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__GroupInfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__GroupInfoResponse * SOAP_FMAC4 soap_get__ns2__GroupInfoResponse(struct soap *soap, _ns2__GroupInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__GroupInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns2__GroupInfoResponse * SOAP_FMAC2 soap_instantiate__ns2__GroupInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__GroupInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__GroupInfoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns2__GroupInfoResponse);
		if (size)
			*size = sizeof(_ns2__GroupInfoResponse);
		((_ns2__GroupInfoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns2__GroupInfoResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns2__GroupInfoResponse);
		for (int i = 0; i < n; i++)
			((_ns2__GroupInfoResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__GroupInfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__GroupInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__GroupInfoResponse %p -> %p\n", q, p));
	*(_ns2__GroupInfoResponse*)p = *(_ns2__GroupInfoResponse*)q;
}

void _ns2__GroupInfoRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns2__GroupInfoRequest::groupname);
	/* transient soap skipped */
}

void _ns2__GroupInfoRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns2__GroupInfoRequest::groupname);
	/* transient soap skipped */
}

int _ns2__GroupInfoRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__GroupInfoRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GroupInfoRequest(struct soap *soap, const char *tag, int id, const _ns2__GroupInfoRequest *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__GroupInfoRequest), type))
		return soap->error;
	if (soap_out_std__string(soap, "groupname", -1, &(a->_ns2__GroupInfoRequest::groupname), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns2__GroupInfoRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__GroupInfoRequest(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__GroupInfoRequest * SOAP_FMAC4 soap_in__ns2__GroupInfoRequest(struct soap *soap, const char *tag, _ns2__GroupInfoRequest *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__GroupInfoRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__GroupInfoRequest, sizeof(_ns2__GroupInfoRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__GroupInfoRequest)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__GroupInfoRequest *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_groupname1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_groupname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "groupname", &(a->_ns2__GroupInfoRequest::groupname), "xsd:string"))
				{	soap_flag_groupname1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__GroupInfoRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__GroupInfoRequest, 0, sizeof(_ns2__GroupInfoRequest), 0, soap_copy__ns2__GroupInfoRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_groupname1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns2__GroupInfoRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__GroupInfoRequest);
	if (this->soap_out(soap, tag?tag:"ns2:GroupInfoRequest", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__GroupInfoRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__GroupInfoRequest(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__GroupInfoRequest * SOAP_FMAC4 soap_get__ns2__GroupInfoRequest(struct soap *soap, _ns2__GroupInfoRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__GroupInfoRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns2__GroupInfoRequest * SOAP_FMAC2 soap_instantiate__ns2__GroupInfoRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__GroupInfoRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__GroupInfoRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns2__GroupInfoRequest);
		if (size)
			*size = sizeof(_ns2__GroupInfoRequest);
		((_ns2__GroupInfoRequest*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns2__GroupInfoRequest[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns2__GroupInfoRequest);
		for (int i = 0; i < n; i++)
			((_ns2__GroupInfoRequest*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__GroupInfoRequest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__GroupInfoRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__GroupInfoRequest %p -> %p\n", q, p));
	*(_ns2__GroupInfoRequest*)p = *(_ns2__GroupInfoRequest*)q;
}

void _ns2__GroupDeleteUserResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns2__GroupDeleteUserResponse::response);
	/* transient soap skipped */
}

void _ns2__GroupDeleteUserResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns2__GroupDeleteUserResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__GroupDeleteUserResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GroupDeleteUserResponse(struct soap *soap, const char *tag, int id, const _ns2__GroupDeleteUserResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__GroupDeleteUserResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "response", -1, &(a->_ns2__GroupDeleteUserResponse::response), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns2__GroupDeleteUserResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__GroupDeleteUserResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__GroupDeleteUserResponse * SOAP_FMAC4 soap_in__ns2__GroupDeleteUserResponse(struct soap *soap, const char *tag, _ns2__GroupDeleteUserResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__GroupDeleteUserResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__GroupDeleteUserResponse, sizeof(_ns2__GroupDeleteUserResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__GroupDeleteUserResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__GroupDeleteUserResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_response1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "response", &(a->_ns2__GroupDeleteUserResponse::response), "xsd:boolean"))
				{	soap_flag_response1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__GroupDeleteUserResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__GroupDeleteUserResponse, 0, sizeof(_ns2__GroupDeleteUserResponse), 0, soap_copy__ns2__GroupDeleteUserResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns2__GroupDeleteUserResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__GroupDeleteUserResponse);
	if (this->soap_out(soap, tag?tag:"ns2:GroupDeleteUserResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__GroupDeleteUserResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__GroupDeleteUserResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__GroupDeleteUserResponse * SOAP_FMAC4 soap_get__ns2__GroupDeleteUserResponse(struct soap *soap, _ns2__GroupDeleteUserResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__GroupDeleteUserResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns2__GroupDeleteUserResponse * SOAP_FMAC2 soap_instantiate__ns2__GroupDeleteUserResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__GroupDeleteUserResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__GroupDeleteUserResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns2__GroupDeleteUserResponse);
		if (size)
			*size = sizeof(_ns2__GroupDeleteUserResponse);
		((_ns2__GroupDeleteUserResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns2__GroupDeleteUserResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns2__GroupDeleteUserResponse);
		for (int i = 0; i < n; i++)
			((_ns2__GroupDeleteUserResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__GroupDeleteUserResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__GroupDeleteUserResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__GroupDeleteUserResponse %p -> %p\n", q, p));
	*(_ns2__GroupDeleteUserResponse*)p = *(_ns2__GroupDeleteUserResponse*)q;
}

void _ns2__GroupDeleteUserRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns2__GroupDeleteUserRequest::username);
	soap_default_std__string(soap, &this->_ns2__GroupDeleteUserRequest::groupname);
	/* transient soap skipped */
}

void _ns2__GroupDeleteUserRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns2__GroupDeleteUserRequest::username);
	soap_serialize_std__string(soap, &this->_ns2__GroupDeleteUserRequest::groupname);
	/* transient soap skipped */
}

int _ns2__GroupDeleteUserRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__GroupDeleteUserRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GroupDeleteUserRequest(struct soap *soap, const char *tag, int id, const _ns2__GroupDeleteUserRequest *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__GroupDeleteUserRequest), type))
		return soap->error;
	if (soap_out_std__string(soap, "username", -1, &(a->_ns2__GroupDeleteUserRequest::username), ""))
		return soap->error;
	if (soap_out_std__string(soap, "groupname", -1, &(a->_ns2__GroupDeleteUserRequest::groupname), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns2__GroupDeleteUserRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__GroupDeleteUserRequest(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__GroupDeleteUserRequest * SOAP_FMAC4 soap_in__ns2__GroupDeleteUserRequest(struct soap *soap, const char *tag, _ns2__GroupDeleteUserRequest *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__GroupDeleteUserRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__GroupDeleteUserRequest, sizeof(_ns2__GroupDeleteUserRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__GroupDeleteUserRequest)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__GroupDeleteUserRequest *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_username1 = 1;
	size_t soap_flag_groupname1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "username", &(a->_ns2__GroupDeleteUserRequest::username), "xsd:string"))
				{	soap_flag_username1--;
					continue;
				}
			if (soap_flag_groupname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "groupname", &(a->_ns2__GroupDeleteUserRequest::groupname), "xsd:string"))
				{	soap_flag_groupname1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__GroupDeleteUserRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__GroupDeleteUserRequest, 0, sizeof(_ns2__GroupDeleteUserRequest), 0, soap_copy__ns2__GroupDeleteUserRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_username1 > 0 || soap_flag_groupname1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns2__GroupDeleteUserRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__GroupDeleteUserRequest);
	if (this->soap_out(soap, tag?tag:"ns2:GroupDeleteUserRequest", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__GroupDeleteUserRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__GroupDeleteUserRequest(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__GroupDeleteUserRequest * SOAP_FMAC4 soap_get__ns2__GroupDeleteUserRequest(struct soap *soap, _ns2__GroupDeleteUserRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__GroupDeleteUserRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns2__GroupDeleteUserRequest * SOAP_FMAC2 soap_instantiate__ns2__GroupDeleteUserRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__GroupDeleteUserRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__GroupDeleteUserRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns2__GroupDeleteUserRequest);
		if (size)
			*size = sizeof(_ns2__GroupDeleteUserRequest);
		((_ns2__GroupDeleteUserRequest*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns2__GroupDeleteUserRequest[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns2__GroupDeleteUserRequest);
		for (int i = 0; i < n; i++)
			((_ns2__GroupDeleteUserRequest*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__GroupDeleteUserRequest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__GroupDeleteUserRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__GroupDeleteUserRequest %p -> %p\n", q, p));
	*(_ns2__GroupDeleteUserRequest*)p = *(_ns2__GroupDeleteUserRequest*)q;
}

void _ns2__GroupAddUserResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns2__GroupAddUserResponse::response);
	/* transient soap skipped */
}

void _ns2__GroupAddUserResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns2__GroupAddUserResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__GroupAddUserResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GroupAddUserResponse(struct soap *soap, const char *tag, int id, const _ns2__GroupAddUserResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__GroupAddUserResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "response", -1, &(a->_ns2__GroupAddUserResponse::response), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns2__GroupAddUserResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__GroupAddUserResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__GroupAddUserResponse * SOAP_FMAC4 soap_in__ns2__GroupAddUserResponse(struct soap *soap, const char *tag, _ns2__GroupAddUserResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__GroupAddUserResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__GroupAddUserResponse, sizeof(_ns2__GroupAddUserResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__GroupAddUserResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__GroupAddUserResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_response1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "response", &(a->_ns2__GroupAddUserResponse::response), "xsd:boolean"))
				{	soap_flag_response1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__GroupAddUserResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__GroupAddUserResponse, 0, sizeof(_ns2__GroupAddUserResponse), 0, soap_copy__ns2__GroupAddUserResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns2__GroupAddUserResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__GroupAddUserResponse);
	if (this->soap_out(soap, tag?tag:"ns2:GroupAddUserResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__GroupAddUserResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__GroupAddUserResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__GroupAddUserResponse * SOAP_FMAC4 soap_get__ns2__GroupAddUserResponse(struct soap *soap, _ns2__GroupAddUserResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__GroupAddUserResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns2__GroupAddUserResponse * SOAP_FMAC2 soap_instantiate__ns2__GroupAddUserResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__GroupAddUserResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__GroupAddUserResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns2__GroupAddUserResponse);
		if (size)
			*size = sizeof(_ns2__GroupAddUserResponse);
		((_ns2__GroupAddUserResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns2__GroupAddUserResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns2__GroupAddUserResponse);
		for (int i = 0; i < n; i++)
			((_ns2__GroupAddUserResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__GroupAddUserResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__GroupAddUserResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__GroupAddUserResponse %p -> %p\n", q, p));
	*(_ns2__GroupAddUserResponse*)p = *(_ns2__GroupAddUserResponse*)q;
}

void _ns2__GroupAddUserRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns2__GroupAddUserRequest::username);
	soap_default_std__string(soap, &this->_ns2__GroupAddUserRequest::groupname);
	/* transient soap skipped */
}

void _ns2__GroupAddUserRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns2__GroupAddUserRequest::username);
	soap_serialize_std__string(soap, &this->_ns2__GroupAddUserRequest::groupname);
	/* transient soap skipped */
}

int _ns2__GroupAddUserRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__GroupAddUserRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GroupAddUserRequest(struct soap *soap, const char *tag, int id, const _ns2__GroupAddUserRequest *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__GroupAddUserRequest), type))
		return soap->error;
	if (soap_out_std__string(soap, "username", -1, &(a->_ns2__GroupAddUserRequest::username), ""))
		return soap->error;
	if (soap_out_std__string(soap, "groupname", -1, &(a->_ns2__GroupAddUserRequest::groupname), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns2__GroupAddUserRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__GroupAddUserRequest(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__GroupAddUserRequest * SOAP_FMAC4 soap_in__ns2__GroupAddUserRequest(struct soap *soap, const char *tag, _ns2__GroupAddUserRequest *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__GroupAddUserRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__GroupAddUserRequest, sizeof(_ns2__GroupAddUserRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__GroupAddUserRequest)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__GroupAddUserRequest *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_username1 = 1;
	size_t soap_flag_groupname1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "username", &(a->_ns2__GroupAddUserRequest::username), "xsd:string"))
				{	soap_flag_username1--;
					continue;
				}
			if (soap_flag_groupname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "groupname", &(a->_ns2__GroupAddUserRequest::groupname), "xsd:string"))
				{	soap_flag_groupname1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__GroupAddUserRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__GroupAddUserRequest, 0, sizeof(_ns2__GroupAddUserRequest), 0, soap_copy__ns2__GroupAddUserRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_username1 > 0 || soap_flag_groupname1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns2__GroupAddUserRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__GroupAddUserRequest);
	if (this->soap_out(soap, tag?tag:"ns2:GroupAddUserRequest", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__GroupAddUserRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__GroupAddUserRequest(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__GroupAddUserRequest * SOAP_FMAC4 soap_get__ns2__GroupAddUserRequest(struct soap *soap, _ns2__GroupAddUserRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__GroupAddUserRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns2__GroupAddUserRequest * SOAP_FMAC2 soap_instantiate__ns2__GroupAddUserRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__GroupAddUserRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__GroupAddUserRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns2__GroupAddUserRequest);
		if (size)
			*size = sizeof(_ns2__GroupAddUserRequest);
		((_ns2__GroupAddUserRequest*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns2__GroupAddUserRequest[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns2__GroupAddUserRequest);
		for (int i = 0; i < n; i++)
			((_ns2__GroupAddUserRequest*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__GroupAddUserRequest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__GroupAddUserRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__GroupAddUserRequest %p -> %p\n", q, p));
	*(_ns2__GroupAddUserRequest*)p = *(_ns2__GroupAddUserRequest*)q;
}

void _ns2__GroupDeletionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns2__GroupDeletionResponse::response);
	/* transient soap skipped */
}

void _ns2__GroupDeletionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns2__GroupDeletionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__GroupDeletionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GroupDeletionResponse(struct soap *soap, const char *tag, int id, const _ns2__GroupDeletionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__GroupDeletionResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "response", -1, &(a->_ns2__GroupDeletionResponse::response), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns2__GroupDeletionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__GroupDeletionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__GroupDeletionResponse * SOAP_FMAC4 soap_in__ns2__GroupDeletionResponse(struct soap *soap, const char *tag, _ns2__GroupDeletionResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__GroupDeletionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__GroupDeletionResponse, sizeof(_ns2__GroupDeletionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__GroupDeletionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__GroupDeletionResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_response1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "response", &(a->_ns2__GroupDeletionResponse::response), "xsd:boolean"))
				{	soap_flag_response1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__GroupDeletionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__GroupDeletionResponse, 0, sizeof(_ns2__GroupDeletionResponse), 0, soap_copy__ns2__GroupDeletionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns2__GroupDeletionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__GroupDeletionResponse);
	if (this->soap_out(soap, tag?tag:"ns2:GroupDeletionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__GroupDeletionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__GroupDeletionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__GroupDeletionResponse * SOAP_FMAC4 soap_get__ns2__GroupDeletionResponse(struct soap *soap, _ns2__GroupDeletionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__GroupDeletionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns2__GroupDeletionResponse * SOAP_FMAC2 soap_instantiate__ns2__GroupDeletionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__GroupDeletionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__GroupDeletionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns2__GroupDeletionResponse);
		if (size)
			*size = sizeof(_ns2__GroupDeletionResponse);
		((_ns2__GroupDeletionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns2__GroupDeletionResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns2__GroupDeletionResponse);
		for (int i = 0; i < n; i++)
			((_ns2__GroupDeletionResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__GroupDeletionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__GroupDeletionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__GroupDeletionResponse %p -> %p\n", q, p));
	*(_ns2__GroupDeletionResponse*)p = *(_ns2__GroupDeletionResponse*)q;
}

void _ns2__GroupDeletionRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns2__GroupDeletionRequest::groupname);
	/* transient soap skipped */
}

void _ns2__GroupDeletionRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns2__GroupDeletionRequest::groupname);
	/* transient soap skipped */
}

int _ns2__GroupDeletionRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__GroupDeletionRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GroupDeletionRequest(struct soap *soap, const char *tag, int id, const _ns2__GroupDeletionRequest *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__GroupDeletionRequest), type))
		return soap->error;
	if (soap_out_std__string(soap, "groupname", -1, &(a->_ns2__GroupDeletionRequest::groupname), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns2__GroupDeletionRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__GroupDeletionRequest(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__GroupDeletionRequest * SOAP_FMAC4 soap_in__ns2__GroupDeletionRequest(struct soap *soap, const char *tag, _ns2__GroupDeletionRequest *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__GroupDeletionRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__GroupDeletionRequest, sizeof(_ns2__GroupDeletionRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__GroupDeletionRequest)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__GroupDeletionRequest *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_groupname1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_groupname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "groupname", &(a->_ns2__GroupDeletionRequest::groupname), "xsd:string"))
				{	soap_flag_groupname1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__GroupDeletionRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__GroupDeletionRequest, 0, sizeof(_ns2__GroupDeletionRequest), 0, soap_copy__ns2__GroupDeletionRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_groupname1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns2__GroupDeletionRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__GroupDeletionRequest);
	if (this->soap_out(soap, tag?tag:"ns2:GroupDeletionRequest", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__GroupDeletionRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__GroupDeletionRequest(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__GroupDeletionRequest * SOAP_FMAC4 soap_get__ns2__GroupDeletionRequest(struct soap *soap, _ns2__GroupDeletionRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__GroupDeletionRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns2__GroupDeletionRequest * SOAP_FMAC2 soap_instantiate__ns2__GroupDeletionRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__GroupDeletionRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__GroupDeletionRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns2__GroupDeletionRequest);
		if (size)
			*size = sizeof(_ns2__GroupDeletionRequest);
		((_ns2__GroupDeletionRequest*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns2__GroupDeletionRequest[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns2__GroupDeletionRequest);
		for (int i = 0; i < n; i++)
			((_ns2__GroupDeletionRequest*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__GroupDeletionRequest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__GroupDeletionRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__GroupDeletionRequest %p -> %p\n", q, p));
	*(_ns2__GroupDeletionRequest*)p = *(_ns2__GroupDeletionRequest*)q;
}

void _ns2__GroupCreationResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns2__GroupCreationResponse::response);
	/* transient soap skipped */
}

void _ns2__GroupCreationResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns2__GroupCreationResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__GroupCreationResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GroupCreationResponse(struct soap *soap, const char *tag, int id, const _ns2__GroupCreationResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__GroupCreationResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "response", -1, &(a->_ns2__GroupCreationResponse::response), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns2__GroupCreationResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__GroupCreationResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__GroupCreationResponse * SOAP_FMAC4 soap_in__ns2__GroupCreationResponse(struct soap *soap, const char *tag, _ns2__GroupCreationResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__GroupCreationResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__GroupCreationResponse, sizeof(_ns2__GroupCreationResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__GroupCreationResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__GroupCreationResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_response1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "response", &(a->_ns2__GroupCreationResponse::response), "xsd:boolean"))
				{	soap_flag_response1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__GroupCreationResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__GroupCreationResponse, 0, sizeof(_ns2__GroupCreationResponse), 0, soap_copy__ns2__GroupCreationResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns2__GroupCreationResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__GroupCreationResponse);
	if (this->soap_out(soap, tag?tag:"ns2:GroupCreationResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__GroupCreationResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__GroupCreationResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__GroupCreationResponse * SOAP_FMAC4 soap_get__ns2__GroupCreationResponse(struct soap *soap, _ns2__GroupCreationResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__GroupCreationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns2__GroupCreationResponse * SOAP_FMAC2 soap_instantiate__ns2__GroupCreationResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__GroupCreationResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__GroupCreationResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns2__GroupCreationResponse);
		if (size)
			*size = sizeof(_ns2__GroupCreationResponse);
		((_ns2__GroupCreationResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns2__GroupCreationResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns2__GroupCreationResponse);
		for (int i = 0; i < n; i++)
			((_ns2__GroupCreationResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__GroupCreationResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__GroupCreationResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__GroupCreationResponse %p -> %p\n", q, p));
	*(_ns2__GroupCreationResponse*)p = *(_ns2__GroupCreationResponse*)q;
}

void _ns2__GroupCreationRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns2__GroupCreationRequest::groupname);
	/* transient soap skipped */
}

void _ns2__GroupCreationRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns2__GroupCreationRequest::groupname);
	/* transient soap skipped */
}

int _ns2__GroupCreationRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__GroupCreationRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GroupCreationRequest(struct soap *soap, const char *tag, int id, const _ns2__GroupCreationRequest *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__GroupCreationRequest), type))
		return soap->error;
	if (soap_out_std__string(soap, "groupname", -1, &(a->_ns2__GroupCreationRequest::groupname), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns2__GroupCreationRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__GroupCreationRequest(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__GroupCreationRequest * SOAP_FMAC4 soap_in__ns2__GroupCreationRequest(struct soap *soap, const char *tag, _ns2__GroupCreationRequest *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__GroupCreationRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__GroupCreationRequest, sizeof(_ns2__GroupCreationRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__GroupCreationRequest)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__GroupCreationRequest *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_groupname1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_groupname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "groupname", &(a->_ns2__GroupCreationRequest::groupname), "xsd:string"))
				{	soap_flag_groupname1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__GroupCreationRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__GroupCreationRequest, 0, sizeof(_ns2__GroupCreationRequest), 0, soap_copy__ns2__GroupCreationRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_groupname1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns2__GroupCreationRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__GroupCreationRequest);
	if (this->soap_out(soap, tag?tag:"ns2:GroupCreationRequest", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__GroupCreationRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__GroupCreationRequest(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__GroupCreationRequest * SOAP_FMAC4 soap_get__ns2__GroupCreationRequest(struct soap *soap, _ns2__GroupCreationRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__GroupCreationRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns2__GroupCreationRequest * SOAP_FMAC2 soap_instantiate__ns2__GroupCreationRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__GroupCreationRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__GroupCreationRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns2__GroupCreationRequest);
		if (size)
			*size = sizeof(_ns2__GroupCreationRequest);
		((_ns2__GroupCreationRequest*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns2__GroupCreationRequest[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns2__GroupCreationRequest);
		for (int i = 0; i < n; i++)
			((_ns2__GroupCreationRequest*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__GroupCreationRequest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__GroupCreationRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__GroupCreationRequest %p -> %p\n", q, p));
	*(_ns2__GroupCreationRequest*)p = *(_ns2__GroupCreationRequest*)q;
}

void _ns2__UserCreationResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns2__UserCreationResponse::response);
	/* transient soap skipped */
}

void _ns2__UserCreationResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns2__UserCreationResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__UserCreationResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__UserCreationResponse(struct soap *soap, const char *tag, int id, const _ns2__UserCreationResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__UserCreationResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "response", -1, &(a->_ns2__UserCreationResponse::response), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns2__UserCreationResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__UserCreationResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__UserCreationResponse * SOAP_FMAC4 soap_in__ns2__UserCreationResponse(struct soap *soap, const char *tag, _ns2__UserCreationResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__UserCreationResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__UserCreationResponse, sizeof(_ns2__UserCreationResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__UserCreationResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__UserCreationResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_response1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "response", &(a->_ns2__UserCreationResponse::response), "xsd:boolean"))
				{	soap_flag_response1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__UserCreationResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__UserCreationResponse, 0, sizeof(_ns2__UserCreationResponse), 0, soap_copy__ns2__UserCreationResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns2__UserCreationResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__UserCreationResponse);
	if (this->soap_out(soap, tag?tag:"ns2:UserCreationResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__UserCreationResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__UserCreationResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__UserCreationResponse * SOAP_FMAC4 soap_get__ns2__UserCreationResponse(struct soap *soap, _ns2__UserCreationResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__UserCreationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns2__UserCreationResponse * SOAP_FMAC2 soap_instantiate__ns2__UserCreationResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__UserCreationResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__UserCreationResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns2__UserCreationResponse);
		if (size)
			*size = sizeof(_ns2__UserCreationResponse);
		((_ns2__UserCreationResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns2__UserCreationResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns2__UserCreationResponse);
		for (int i = 0; i < n; i++)
			((_ns2__UserCreationResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__UserCreationResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__UserCreationResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__UserCreationResponse %p -> %p\n", q, p));
	*(_ns2__UserCreationResponse*)p = *(_ns2__UserCreationResponse*)q;
}

void _ns2__UserCreationRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns2__UserCreationRequest::username);
	soap_default_std__string(soap, &this->_ns2__UserCreationRequest::firstname);
	soap_default_std__string(soap, &this->_ns2__UserCreationRequest::lastname);
	soap_default_bool(soap, &this->_ns2__UserCreationRequest::gender);
	soap_default_xsd__integer(soap, &this->_ns2__UserCreationRequest::age);
	/* transient soap skipped */
}

void _ns2__UserCreationRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns2__UserCreationRequest::username);
	soap_serialize_std__string(soap, &this->_ns2__UserCreationRequest::firstname);
	soap_serialize_std__string(soap, &this->_ns2__UserCreationRequest::lastname);
	soap_serialize_xsd__integer(soap, &this->_ns2__UserCreationRequest::age);
	/* transient soap skipped */
}

int _ns2__UserCreationRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__UserCreationRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__UserCreationRequest(struct soap *soap, const char *tag, int id, const _ns2__UserCreationRequest *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__UserCreationRequest), type))
		return soap->error;
	if (soap_out_std__string(soap, "username", -1, &(a->_ns2__UserCreationRequest::username), ""))
		return soap->error;
	if (soap_out_std__string(soap, "firstname", -1, &(a->_ns2__UserCreationRequest::firstname), ""))
		return soap->error;
	if (soap_out_std__string(soap, "lastname", -1, &(a->_ns2__UserCreationRequest::lastname), ""))
		return soap->error;
	if (soap_out_bool(soap, "gender", -1, &(a->_ns2__UserCreationRequest::gender), ""))
		return soap->error;
	if (soap_out_xsd__integer(soap, "age", -1, &(a->_ns2__UserCreationRequest::age), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns2__UserCreationRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__UserCreationRequest(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__UserCreationRequest * SOAP_FMAC4 soap_in__ns2__UserCreationRequest(struct soap *soap, const char *tag, _ns2__UserCreationRequest *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__UserCreationRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__UserCreationRequest, sizeof(_ns2__UserCreationRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__UserCreationRequest)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__UserCreationRequest *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_username1 = 1;
	size_t soap_flag_firstname1 = 1;
	size_t soap_flag_lastname1 = 1;
	size_t soap_flag_gender1 = 1;
	size_t soap_flag_age1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "username", &(a->_ns2__UserCreationRequest::username), "xsd:string"))
				{	soap_flag_username1--;
					continue;
				}
			if (soap_flag_firstname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "firstname", &(a->_ns2__UserCreationRequest::firstname), "xsd:string"))
				{	soap_flag_firstname1--;
					continue;
				}
			if (soap_flag_lastname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "lastname", &(a->_ns2__UserCreationRequest::lastname), "xsd:string"))
				{	soap_flag_lastname1--;
					continue;
				}
			if (soap_flag_gender1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "gender", &(a->_ns2__UserCreationRequest::gender), "xsd:boolean"))
				{	soap_flag_gender1--;
					continue;
				}
			if (soap_flag_age1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "age", &(a->_ns2__UserCreationRequest::age), "xsd:integer"))
				{	soap_flag_age1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__UserCreationRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__UserCreationRequest, 0, sizeof(_ns2__UserCreationRequest), 0, soap_copy__ns2__UserCreationRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_username1 > 0 || soap_flag_firstname1 > 0 || soap_flag_lastname1 > 0 || soap_flag_gender1 > 0 || soap_flag_age1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns2__UserCreationRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__UserCreationRequest);
	if (this->soap_out(soap, tag?tag:"ns2:UserCreationRequest", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__UserCreationRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__UserCreationRequest(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__UserCreationRequest * SOAP_FMAC4 soap_get__ns2__UserCreationRequest(struct soap *soap, _ns2__UserCreationRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__UserCreationRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns2__UserCreationRequest * SOAP_FMAC2 soap_instantiate__ns2__UserCreationRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__UserCreationRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__UserCreationRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns2__UserCreationRequest);
		if (size)
			*size = sizeof(_ns2__UserCreationRequest);
		((_ns2__UserCreationRequest*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns2__UserCreationRequest[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns2__UserCreationRequest);
		for (int i = 0; i < n; i++)
			((_ns2__UserCreationRequest*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__UserCreationRequest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__UserCreationRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__UserCreationRequest %p -> %p\n", q, p));
	*(_ns2__UserCreationRequest*)p = *(_ns2__UserCreationRequest*)q;
}

void _ns2__UserDeletionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns2__UserDeletionResponse::response);
	/* transient soap skipped */
}

void _ns2__UserDeletionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns2__UserDeletionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__UserDeletionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__UserDeletionResponse(struct soap *soap, const char *tag, int id, const _ns2__UserDeletionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__UserDeletionResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "response", -1, &(a->_ns2__UserDeletionResponse::response), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns2__UserDeletionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__UserDeletionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__UserDeletionResponse * SOAP_FMAC4 soap_in__ns2__UserDeletionResponse(struct soap *soap, const char *tag, _ns2__UserDeletionResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__UserDeletionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__UserDeletionResponse, sizeof(_ns2__UserDeletionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__UserDeletionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__UserDeletionResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_response1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "response", &(a->_ns2__UserDeletionResponse::response), "xsd:boolean"))
				{	soap_flag_response1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__UserDeletionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__UserDeletionResponse, 0, sizeof(_ns2__UserDeletionResponse), 0, soap_copy__ns2__UserDeletionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns2__UserDeletionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__UserDeletionResponse);
	if (this->soap_out(soap, tag?tag:"ns2:UserDeletionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__UserDeletionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__UserDeletionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__UserDeletionResponse * SOAP_FMAC4 soap_get__ns2__UserDeletionResponse(struct soap *soap, _ns2__UserDeletionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__UserDeletionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns2__UserDeletionResponse * SOAP_FMAC2 soap_instantiate__ns2__UserDeletionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__UserDeletionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__UserDeletionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns2__UserDeletionResponse);
		if (size)
			*size = sizeof(_ns2__UserDeletionResponse);
		((_ns2__UserDeletionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns2__UserDeletionResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns2__UserDeletionResponse);
		for (int i = 0; i < n; i++)
			((_ns2__UserDeletionResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__UserDeletionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__UserDeletionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__UserDeletionResponse %p -> %p\n", q, p));
	*(_ns2__UserDeletionResponse*)p = *(_ns2__UserDeletionResponse*)q;
}

void _ns2__UserDeletionRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns2__UserDeletionRequest::username);
	/* transient soap skipped */
}

void _ns2__UserDeletionRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns2__UserDeletionRequest::username);
	/* transient soap skipped */
}

int _ns2__UserDeletionRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__UserDeletionRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__UserDeletionRequest(struct soap *soap, const char *tag, int id, const _ns2__UserDeletionRequest *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__UserDeletionRequest), type))
		return soap->error;
	if (soap_out_std__string(soap, "username", -1, &(a->_ns2__UserDeletionRequest::username), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns2__UserDeletionRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__UserDeletionRequest(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__UserDeletionRequest * SOAP_FMAC4 soap_in__ns2__UserDeletionRequest(struct soap *soap, const char *tag, _ns2__UserDeletionRequest *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__UserDeletionRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__UserDeletionRequest, sizeof(_ns2__UserDeletionRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__UserDeletionRequest)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__UserDeletionRequest *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_username1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "username", &(a->_ns2__UserDeletionRequest::username), "xsd:string"))
				{	soap_flag_username1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__UserDeletionRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__UserDeletionRequest, 0, sizeof(_ns2__UserDeletionRequest), 0, soap_copy__ns2__UserDeletionRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_username1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns2__UserDeletionRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__UserDeletionRequest);
	if (this->soap_out(soap, tag?tag:"ns2:UserDeletionRequest", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__UserDeletionRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__UserDeletionRequest(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__UserDeletionRequest * SOAP_FMAC4 soap_get__ns2__UserDeletionRequest(struct soap *soap, _ns2__UserDeletionRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__UserDeletionRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns2__UserDeletionRequest * SOAP_FMAC2 soap_instantiate__ns2__UserDeletionRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__UserDeletionRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__UserDeletionRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns2__UserDeletionRequest);
		if (size)
			*size = sizeof(_ns2__UserDeletionRequest);
		((_ns2__UserDeletionRequest*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns2__UserDeletionRequest[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns2__UserDeletionRequest);
		for (int i = 0; i < n; i++)
			((_ns2__UserDeletionRequest*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__UserDeletionRequest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__UserDeletionRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__UserDeletionRequest %p -> %p\n", q, p));
	*(_ns2__UserDeletionRequest*)p = *(_ns2__UserDeletionRequest*)q;
}

void _ns2__UserInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns2__UserInfo::firstname);
	soap_default_std__string(soap, &this->_ns2__UserInfo::lastname);
	soap_default_bool(soap, &this->_ns2__UserInfo::gender);
	soap_default_xsd__integer(soap, &this->_ns2__UserInfo::age);
	/* transient soap skipped */
}

void _ns2__UserInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns2__UserInfo::firstname);
	soap_serialize_std__string(soap, &this->_ns2__UserInfo::lastname);
	soap_serialize_xsd__integer(soap, &this->_ns2__UserInfo::age);
	/* transient soap skipped */
}

int _ns2__UserInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__UserInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__UserInfo(struct soap *soap, const char *tag, int id, const _ns2__UserInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__UserInfo), type))
		return soap->error;
	if (soap_out_std__string(soap, "firstname", -1, &(a->_ns2__UserInfo::firstname), ""))
		return soap->error;
	if (soap_out_std__string(soap, "lastname", -1, &(a->_ns2__UserInfo::lastname), ""))
		return soap->error;
	if (soap_out_bool(soap, "gender", -1, &(a->_ns2__UserInfo::gender), ""))
		return soap->error;
	if (soap_out_xsd__integer(soap, "age", -1, &(a->_ns2__UserInfo::age), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns2__UserInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__UserInfo(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__UserInfo * SOAP_FMAC4 soap_in__ns2__UserInfo(struct soap *soap, const char *tag, _ns2__UserInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__UserInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__UserInfo, sizeof(_ns2__UserInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__UserInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__UserInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_firstname1 = 1;
	size_t soap_flag_lastname1 = 1;
	size_t soap_flag_gender1 = 1;
	size_t soap_flag_age1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_firstname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "firstname", &(a->_ns2__UserInfo::firstname), "xsd:string"))
				{	soap_flag_firstname1--;
					continue;
				}
			if (soap_flag_lastname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "lastname", &(a->_ns2__UserInfo::lastname), "xsd:string"))
				{	soap_flag_lastname1--;
					continue;
				}
			if (soap_flag_gender1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "gender", &(a->_ns2__UserInfo::gender), "xsd:boolean"))
				{	soap_flag_gender1--;
					continue;
				}
			if (soap_flag_age1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "age", &(a->_ns2__UserInfo::age), "xsd:integer"))
				{	soap_flag_age1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__UserInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__UserInfo, 0, sizeof(_ns2__UserInfo), 0, soap_copy__ns2__UserInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_firstname1 > 0 || soap_flag_lastname1 > 0 || soap_flag_gender1 > 0 || soap_flag_age1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns2__UserInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__UserInfo);
	if (this->soap_out(soap, tag?tag:"ns2:UserInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__UserInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__UserInfo(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__UserInfo * SOAP_FMAC4 soap_get__ns2__UserInfo(struct soap *soap, _ns2__UserInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__UserInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns2__UserInfo * SOAP_FMAC2 soap_instantiate__ns2__UserInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__UserInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__UserInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns2__UserInfo);
		if (size)
			*size = sizeof(_ns2__UserInfo);
		((_ns2__UserInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns2__UserInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns2__UserInfo);
		for (int i = 0; i < n; i++)
			((_ns2__UserInfo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__UserInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__UserInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__UserInfo %p -> %p\n", q, p));
	*(_ns2__UserInfo*)p = *(_ns2__UserInfo*)q;
}

void _ns2__UserInfoRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns2__UserInfoRequest::username);
	/* transient soap skipped */
}

void _ns2__UserInfoRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns2__UserInfoRequest::username);
	/* transient soap skipped */
}

int _ns2__UserInfoRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__UserInfoRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__UserInfoRequest(struct soap *soap, const char *tag, int id, const _ns2__UserInfoRequest *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__UserInfoRequest), type))
		return soap->error;
	if (soap_out_std__string(soap, "username", -1, &(a->_ns2__UserInfoRequest::username), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns2__UserInfoRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__UserInfoRequest(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__UserInfoRequest * SOAP_FMAC4 soap_in__ns2__UserInfoRequest(struct soap *soap, const char *tag, _ns2__UserInfoRequest *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__UserInfoRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__UserInfoRequest, sizeof(_ns2__UserInfoRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns2__UserInfoRequest)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns2__UserInfoRequest *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_username1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "username", &(a->_ns2__UserInfoRequest::username), "xsd:string"))
				{	soap_flag_username1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__UserInfoRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__UserInfoRequest, 0, sizeof(_ns2__UserInfoRequest), 0, soap_copy__ns2__UserInfoRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_username1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns2__UserInfoRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__UserInfoRequest);
	if (this->soap_out(soap, tag?tag:"ns2:UserInfoRequest", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__UserInfoRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__UserInfoRequest(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__UserInfoRequest * SOAP_FMAC4 soap_get__ns2__UserInfoRequest(struct soap *soap, _ns2__UserInfoRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__UserInfoRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns2__UserInfoRequest * SOAP_FMAC2 soap_instantiate__ns2__UserInfoRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__UserInfoRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__UserInfoRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns2__UserInfoRequest);
		if (size)
			*size = sizeof(_ns2__UserInfoRequest);
		((_ns2__UserInfoRequest*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns2__UserInfoRequest[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns2__UserInfoRequest);
		for (int i = 0; i < n; i++)
			((_ns2__UserInfoRequest*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns2__UserInfoRequest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__UserInfoRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__UserInfoRequest %p -> %p\n", q, p));
	*(_ns2__UserInfoRequest*)p = *(_ns2__UserInfoRequest*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__integer), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__integer, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__integer, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__integer, 0, sizeof(std::string), 0, soap_copy_xsd__integer);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__integer);
	if (soap_out_xsd__integer(soap, tag?tag:"xsd:integer", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__integer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetGroupInfo(struct soap *soap, struct __ns1__GetGroupInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__GroupInfoRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetGroupInfo(struct soap *soap, const struct __ns1__GetGroupInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns2__GroupInfoRequest(soap, &a->ns2__GroupInfoRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetGroupInfo(struct soap *soap, const char *tag, int id, const struct __ns1__GetGroupInfo *a, const char *type)
{
	if (soap_out_PointerTo_ns2__GroupInfoRequest(soap, "ns2:GroupInfoRequest", -1, &a->ns2__GroupInfoRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetGroupInfo * SOAP_FMAC4 soap_in___ns1__GetGroupInfo(struct soap *soap, const char *tag, struct __ns1__GetGroupInfo *a, const char *type)
{
	size_t soap_flag_ns2__GroupInfoRequest = 1;
	short soap_flag;
	a = (struct __ns1__GetGroupInfo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetGroupInfo, sizeof(struct __ns1__GetGroupInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetGroupInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__GroupInfoRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns2__GroupInfoRequest(soap, "ns2:GroupInfoRequest", &a->ns2__GroupInfoRequest, ""))
				{	soap_flag_ns2__GroupInfoRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetGroupInfo(struct soap *soap, const struct __ns1__GetGroupInfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetGroupInfo(soap, tag?tag:"-ns1:GetGroupInfo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetGroupInfo * SOAP_FMAC4 soap_get___ns1__GetGroupInfo(struct soap *soap, struct __ns1__GetGroupInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetGroupInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetGroupInfo * SOAP_FMAC2 soap_instantiate___ns1__GetGroupInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetGroupInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetGroupInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetGroupInfo);
		if (size)
			*size = sizeof(struct __ns1__GetGroupInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetGroupInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__GetGroupInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__GetGroupInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetGroupInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetGroupInfo %p -> %p\n", q, p));
	*(struct __ns1__GetGroupInfo*)p = *(struct __ns1__GetGroupInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GroupDeleteUser(struct soap *soap, struct __ns1__GroupDeleteUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__GroupDeleteUserRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GroupDeleteUser(struct soap *soap, const struct __ns1__GroupDeleteUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns2__GroupDeleteUserRequest(soap, &a->ns2__GroupDeleteUserRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GroupDeleteUser(struct soap *soap, const char *tag, int id, const struct __ns1__GroupDeleteUser *a, const char *type)
{
	if (soap_out_PointerTo_ns2__GroupDeleteUserRequest(soap, "ns2:GroupDeleteUserRequest", -1, &a->ns2__GroupDeleteUserRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GroupDeleteUser * SOAP_FMAC4 soap_in___ns1__GroupDeleteUser(struct soap *soap, const char *tag, struct __ns1__GroupDeleteUser *a, const char *type)
{
	size_t soap_flag_ns2__GroupDeleteUserRequest = 1;
	short soap_flag;
	a = (struct __ns1__GroupDeleteUser *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GroupDeleteUser, sizeof(struct __ns1__GroupDeleteUser), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GroupDeleteUser(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__GroupDeleteUserRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns2__GroupDeleteUserRequest(soap, "ns2:GroupDeleteUserRequest", &a->ns2__GroupDeleteUserRequest, ""))
				{	soap_flag_ns2__GroupDeleteUserRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GroupDeleteUser(struct soap *soap, const struct __ns1__GroupDeleteUser *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GroupDeleteUser(soap, tag?tag:"-ns1:GroupDeleteUser", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GroupDeleteUser * SOAP_FMAC4 soap_get___ns1__GroupDeleteUser(struct soap *soap, struct __ns1__GroupDeleteUser *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GroupDeleteUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GroupDeleteUser * SOAP_FMAC2 soap_instantiate___ns1__GroupDeleteUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GroupDeleteUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GroupDeleteUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GroupDeleteUser);
		if (size)
			*size = sizeof(struct __ns1__GroupDeleteUser);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GroupDeleteUser[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__GroupDeleteUser);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__GroupDeleteUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GroupDeleteUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GroupDeleteUser %p -> %p\n", q, p));
	*(struct __ns1__GroupDeleteUser*)p = *(struct __ns1__GroupDeleteUser*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GroupAddUser(struct soap *soap, struct __ns1__GroupAddUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__GroupAddUserRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GroupAddUser(struct soap *soap, const struct __ns1__GroupAddUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns2__GroupAddUserRequest(soap, &a->ns2__GroupAddUserRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GroupAddUser(struct soap *soap, const char *tag, int id, const struct __ns1__GroupAddUser *a, const char *type)
{
	if (soap_out_PointerTo_ns2__GroupAddUserRequest(soap, "ns2:GroupAddUserRequest", -1, &a->ns2__GroupAddUserRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GroupAddUser * SOAP_FMAC4 soap_in___ns1__GroupAddUser(struct soap *soap, const char *tag, struct __ns1__GroupAddUser *a, const char *type)
{
	size_t soap_flag_ns2__GroupAddUserRequest = 1;
	short soap_flag;
	a = (struct __ns1__GroupAddUser *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GroupAddUser, sizeof(struct __ns1__GroupAddUser), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GroupAddUser(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__GroupAddUserRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns2__GroupAddUserRequest(soap, "ns2:GroupAddUserRequest", &a->ns2__GroupAddUserRequest, ""))
				{	soap_flag_ns2__GroupAddUserRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GroupAddUser(struct soap *soap, const struct __ns1__GroupAddUser *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GroupAddUser(soap, tag?tag:"-ns1:GroupAddUser", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GroupAddUser * SOAP_FMAC4 soap_get___ns1__GroupAddUser(struct soap *soap, struct __ns1__GroupAddUser *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GroupAddUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GroupAddUser * SOAP_FMAC2 soap_instantiate___ns1__GroupAddUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GroupAddUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GroupAddUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GroupAddUser);
		if (size)
			*size = sizeof(struct __ns1__GroupAddUser);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GroupAddUser[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__GroupAddUser);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__GroupAddUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GroupAddUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GroupAddUser %p -> %p\n", q, p));
	*(struct __ns1__GroupAddUser*)p = *(struct __ns1__GroupAddUser*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DeleteGroup(struct soap *soap, struct __ns1__DeleteGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__GroupDeletionRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DeleteGroup(struct soap *soap, const struct __ns1__DeleteGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns2__GroupDeletionRequest(soap, &a->ns2__GroupDeletionRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DeleteGroup(struct soap *soap, const char *tag, int id, const struct __ns1__DeleteGroup *a, const char *type)
{
	if (soap_out_PointerTo_ns2__GroupDeletionRequest(soap, "ns2:GroupDeletionRequest", -1, &a->ns2__GroupDeletionRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DeleteGroup * SOAP_FMAC4 soap_in___ns1__DeleteGroup(struct soap *soap, const char *tag, struct __ns1__DeleteGroup *a, const char *type)
{
	size_t soap_flag_ns2__GroupDeletionRequest = 1;
	short soap_flag;
	a = (struct __ns1__DeleteGroup *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__DeleteGroup, sizeof(struct __ns1__DeleteGroup), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__DeleteGroup(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__GroupDeletionRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns2__GroupDeletionRequest(soap, "ns2:GroupDeletionRequest", &a->ns2__GroupDeletionRequest, ""))
				{	soap_flag_ns2__GroupDeletionRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DeleteGroup(struct soap *soap, const struct __ns1__DeleteGroup *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__DeleteGroup(soap, tag?tag:"-ns1:DeleteGroup", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DeleteGroup * SOAP_FMAC4 soap_get___ns1__DeleteGroup(struct soap *soap, struct __ns1__DeleteGroup *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__DeleteGroup(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__DeleteGroup * SOAP_FMAC2 soap_instantiate___ns1__DeleteGroup(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__DeleteGroup(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__DeleteGroup, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__DeleteGroup);
		if (size)
			*size = sizeof(struct __ns1__DeleteGroup);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__DeleteGroup[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__DeleteGroup);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__DeleteGroup*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DeleteGroup(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__DeleteGroup %p -> %p\n", q, p));
	*(struct __ns1__DeleteGroup*)p = *(struct __ns1__DeleteGroup*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CreateGroup(struct soap *soap, struct __ns1__CreateGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__GroupCreationRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CreateGroup(struct soap *soap, const struct __ns1__CreateGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns2__GroupCreationRequest(soap, &a->ns2__GroupCreationRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CreateGroup(struct soap *soap, const char *tag, int id, const struct __ns1__CreateGroup *a, const char *type)
{
	if (soap_out_PointerTo_ns2__GroupCreationRequest(soap, "ns2:GroupCreationRequest", -1, &a->ns2__GroupCreationRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CreateGroup * SOAP_FMAC4 soap_in___ns1__CreateGroup(struct soap *soap, const char *tag, struct __ns1__CreateGroup *a, const char *type)
{
	size_t soap_flag_ns2__GroupCreationRequest = 1;
	short soap_flag;
	a = (struct __ns1__CreateGroup *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CreateGroup, sizeof(struct __ns1__CreateGroup), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CreateGroup(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__GroupCreationRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns2__GroupCreationRequest(soap, "ns2:GroupCreationRequest", &a->ns2__GroupCreationRequest, ""))
				{	soap_flag_ns2__GroupCreationRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CreateGroup(struct soap *soap, const struct __ns1__CreateGroup *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CreateGroup(soap, tag?tag:"-ns1:CreateGroup", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CreateGroup * SOAP_FMAC4 soap_get___ns1__CreateGroup(struct soap *soap, struct __ns1__CreateGroup *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CreateGroup(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CreateGroup * SOAP_FMAC2 soap_instantiate___ns1__CreateGroup(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CreateGroup(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CreateGroup, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CreateGroup);
		if (size)
			*size = sizeof(struct __ns1__CreateGroup);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CreateGroup[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__CreateGroup);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__CreateGroup*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CreateGroup(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CreateGroup %p -> %p\n", q, p));
	*(struct __ns1__CreateGroup*)p = *(struct __ns1__CreateGroup*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CreateUser(struct soap *soap, struct __ns1__CreateUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__UserCreationRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CreateUser(struct soap *soap, const struct __ns1__CreateUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns2__UserCreationRequest(soap, &a->ns2__UserCreationRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CreateUser(struct soap *soap, const char *tag, int id, const struct __ns1__CreateUser *a, const char *type)
{
	if (soap_out_PointerTo_ns2__UserCreationRequest(soap, "ns2:UserCreationRequest", -1, &a->ns2__UserCreationRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CreateUser * SOAP_FMAC4 soap_in___ns1__CreateUser(struct soap *soap, const char *tag, struct __ns1__CreateUser *a, const char *type)
{
	size_t soap_flag_ns2__UserCreationRequest = 1;
	short soap_flag;
	a = (struct __ns1__CreateUser *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CreateUser, sizeof(struct __ns1__CreateUser), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CreateUser(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__UserCreationRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns2__UserCreationRequest(soap, "ns2:UserCreationRequest", &a->ns2__UserCreationRequest, ""))
				{	soap_flag_ns2__UserCreationRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CreateUser(struct soap *soap, const struct __ns1__CreateUser *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__CreateUser(soap, tag?tag:"-ns1:CreateUser", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CreateUser * SOAP_FMAC4 soap_get___ns1__CreateUser(struct soap *soap, struct __ns1__CreateUser *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CreateUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__CreateUser * SOAP_FMAC2 soap_instantiate___ns1__CreateUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CreateUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__CreateUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CreateUser);
		if (size)
			*size = sizeof(struct __ns1__CreateUser);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__CreateUser[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__CreateUser);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__CreateUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CreateUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__CreateUser %p -> %p\n", q, p));
	*(struct __ns1__CreateUser*)p = *(struct __ns1__CreateUser*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DeleteUser(struct soap *soap, struct __ns1__DeleteUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__UserDeletionRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DeleteUser(struct soap *soap, const struct __ns1__DeleteUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns2__UserDeletionRequest(soap, &a->ns2__UserDeletionRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DeleteUser(struct soap *soap, const char *tag, int id, const struct __ns1__DeleteUser *a, const char *type)
{
	if (soap_out_PointerTo_ns2__UserDeletionRequest(soap, "ns2:UserDeletionRequest", -1, &a->ns2__UserDeletionRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DeleteUser * SOAP_FMAC4 soap_in___ns1__DeleteUser(struct soap *soap, const char *tag, struct __ns1__DeleteUser *a, const char *type)
{
	size_t soap_flag_ns2__UserDeletionRequest = 1;
	short soap_flag;
	a = (struct __ns1__DeleteUser *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__DeleteUser, sizeof(struct __ns1__DeleteUser), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__DeleteUser(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__UserDeletionRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns2__UserDeletionRequest(soap, "ns2:UserDeletionRequest", &a->ns2__UserDeletionRequest, ""))
				{	soap_flag_ns2__UserDeletionRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DeleteUser(struct soap *soap, const struct __ns1__DeleteUser *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__DeleteUser(soap, tag?tag:"-ns1:DeleteUser", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DeleteUser * SOAP_FMAC4 soap_get___ns1__DeleteUser(struct soap *soap, struct __ns1__DeleteUser *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__DeleteUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__DeleteUser * SOAP_FMAC2 soap_instantiate___ns1__DeleteUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__DeleteUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__DeleteUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__DeleteUser);
		if (size)
			*size = sizeof(struct __ns1__DeleteUser);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__DeleteUser[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__DeleteUser);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__DeleteUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DeleteUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__DeleteUser %p -> %p\n", q, p));
	*(struct __ns1__DeleteUser*)p = *(struct __ns1__DeleteUser*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetUserInfo(struct soap *soap, struct __ns1__GetUserInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__UserInfoRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetUserInfo(struct soap *soap, const struct __ns1__GetUserInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns2__UserInfoRequest(soap, &a->ns2__UserInfoRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetUserInfo(struct soap *soap, const char *tag, int id, const struct __ns1__GetUserInfo *a, const char *type)
{
	if (soap_out_PointerTo_ns2__UserInfoRequest(soap, "ns2:UserInfoRequest", -1, &a->ns2__UserInfoRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetUserInfo * SOAP_FMAC4 soap_in___ns1__GetUserInfo(struct soap *soap, const char *tag, struct __ns1__GetUserInfo *a, const char *type)
{
	size_t soap_flag_ns2__UserInfoRequest = 1;
	short soap_flag;
	a = (struct __ns1__GetUserInfo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetUserInfo, sizeof(struct __ns1__GetUserInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetUserInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__UserInfoRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns2__UserInfoRequest(soap, "ns2:UserInfoRequest", &a->ns2__UserInfoRequest, ""))
				{	soap_flag_ns2__UserInfoRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetUserInfo(struct soap *soap, const struct __ns1__GetUserInfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetUserInfo(soap, tag?tag:"-ns1:GetUserInfo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetUserInfo * SOAP_FMAC4 soap_get___ns1__GetUserInfo(struct soap *soap, struct __ns1__GetUserInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetUserInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetUserInfo * SOAP_FMAC2 soap_instantiate___ns1__GetUserInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetUserInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetUserInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetUserInfo);
		if (size)
			*size = sizeof(struct __ns1__GetUserInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetUserInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__GetUserInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__GetUserInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetUserInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetUserInfo %p -> %p\n", q, p));
	*(struct __ns1__GetUserInfo*)p = *(struct __ns1__GetUserInfo*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__GroupInfoResponse(struct soap *soap, _ns2__GroupInfoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__GroupInfoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__GroupInfoResponse(struct soap *soap, const char *tag, int id, _ns2__GroupInfoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__GroupInfoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__GroupInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns2__GroupInfoResponse(struct soap *soap, const char *tag, _ns2__GroupInfoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__GroupInfoResponse **)soap_malloc(soap, sizeof(_ns2__GroupInfoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__GroupInfoResponse *)soap_instantiate__ns2__GroupInfoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns2__GroupInfoResponse ** p = (_ns2__GroupInfoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__GroupInfoResponse, sizeof(_ns2__GroupInfoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__GroupInfoResponse(struct soap *soap, _ns2__GroupInfoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__GroupInfoResponse);
	if (soap_out_PointerTo_ns2__GroupInfoResponse(soap, tag?tag:"ns2:GroupInfoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__GroupInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns2__GroupInfoResponse(struct soap *soap, _ns2__GroupInfoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__GroupInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__GroupInfoRequest(struct soap *soap, _ns2__GroupInfoRequest *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__GroupInfoRequest))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__GroupInfoRequest(struct soap *soap, const char *tag, int id, _ns2__GroupInfoRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__GroupInfoRequest);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__GroupInfoRequest ** SOAP_FMAC4 soap_in_PointerTo_ns2__GroupInfoRequest(struct soap *soap, const char *tag, _ns2__GroupInfoRequest **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__GroupInfoRequest **)soap_malloc(soap, sizeof(_ns2__GroupInfoRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__GroupInfoRequest *)soap_instantiate__ns2__GroupInfoRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns2__GroupInfoRequest ** p = (_ns2__GroupInfoRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__GroupInfoRequest, sizeof(_ns2__GroupInfoRequest), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__GroupInfoRequest(struct soap *soap, _ns2__GroupInfoRequest *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__GroupInfoRequest);
	if (soap_out_PointerTo_ns2__GroupInfoRequest(soap, tag?tag:"ns2:GroupInfoRequest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__GroupInfoRequest ** SOAP_FMAC4 soap_get_PointerTo_ns2__GroupInfoRequest(struct soap *soap, _ns2__GroupInfoRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__GroupInfoRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__GroupDeleteUserResponse(struct soap *soap, _ns2__GroupDeleteUserResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__GroupDeleteUserResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__GroupDeleteUserResponse(struct soap *soap, const char *tag, int id, _ns2__GroupDeleteUserResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__GroupDeleteUserResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__GroupDeleteUserResponse ** SOAP_FMAC4 soap_in_PointerTo_ns2__GroupDeleteUserResponse(struct soap *soap, const char *tag, _ns2__GroupDeleteUserResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__GroupDeleteUserResponse **)soap_malloc(soap, sizeof(_ns2__GroupDeleteUserResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__GroupDeleteUserResponse *)soap_instantiate__ns2__GroupDeleteUserResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns2__GroupDeleteUserResponse ** p = (_ns2__GroupDeleteUserResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__GroupDeleteUserResponse, sizeof(_ns2__GroupDeleteUserResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__GroupDeleteUserResponse(struct soap *soap, _ns2__GroupDeleteUserResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__GroupDeleteUserResponse);
	if (soap_out_PointerTo_ns2__GroupDeleteUserResponse(soap, tag?tag:"ns2:GroupDeleteUserResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__GroupDeleteUserResponse ** SOAP_FMAC4 soap_get_PointerTo_ns2__GroupDeleteUserResponse(struct soap *soap, _ns2__GroupDeleteUserResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__GroupDeleteUserResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__GroupDeleteUserRequest(struct soap *soap, _ns2__GroupDeleteUserRequest *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__GroupDeleteUserRequest))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__GroupDeleteUserRequest(struct soap *soap, const char *tag, int id, _ns2__GroupDeleteUserRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__GroupDeleteUserRequest);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__GroupDeleteUserRequest ** SOAP_FMAC4 soap_in_PointerTo_ns2__GroupDeleteUserRequest(struct soap *soap, const char *tag, _ns2__GroupDeleteUserRequest **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__GroupDeleteUserRequest **)soap_malloc(soap, sizeof(_ns2__GroupDeleteUserRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__GroupDeleteUserRequest *)soap_instantiate__ns2__GroupDeleteUserRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns2__GroupDeleteUserRequest ** p = (_ns2__GroupDeleteUserRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__GroupDeleteUserRequest, sizeof(_ns2__GroupDeleteUserRequest), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__GroupDeleteUserRequest(struct soap *soap, _ns2__GroupDeleteUserRequest *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__GroupDeleteUserRequest);
	if (soap_out_PointerTo_ns2__GroupDeleteUserRequest(soap, tag?tag:"ns2:GroupDeleteUserRequest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__GroupDeleteUserRequest ** SOAP_FMAC4 soap_get_PointerTo_ns2__GroupDeleteUserRequest(struct soap *soap, _ns2__GroupDeleteUserRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__GroupDeleteUserRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__GroupAddUserResponse(struct soap *soap, _ns2__GroupAddUserResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__GroupAddUserResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__GroupAddUserResponse(struct soap *soap, const char *tag, int id, _ns2__GroupAddUserResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__GroupAddUserResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__GroupAddUserResponse ** SOAP_FMAC4 soap_in_PointerTo_ns2__GroupAddUserResponse(struct soap *soap, const char *tag, _ns2__GroupAddUserResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__GroupAddUserResponse **)soap_malloc(soap, sizeof(_ns2__GroupAddUserResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__GroupAddUserResponse *)soap_instantiate__ns2__GroupAddUserResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns2__GroupAddUserResponse ** p = (_ns2__GroupAddUserResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__GroupAddUserResponse, sizeof(_ns2__GroupAddUserResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__GroupAddUserResponse(struct soap *soap, _ns2__GroupAddUserResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__GroupAddUserResponse);
	if (soap_out_PointerTo_ns2__GroupAddUserResponse(soap, tag?tag:"ns2:GroupAddUserResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__GroupAddUserResponse ** SOAP_FMAC4 soap_get_PointerTo_ns2__GroupAddUserResponse(struct soap *soap, _ns2__GroupAddUserResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__GroupAddUserResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__GroupAddUserRequest(struct soap *soap, _ns2__GroupAddUserRequest *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__GroupAddUserRequest))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__GroupAddUserRequest(struct soap *soap, const char *tag, int id, _ns2__GroupAddUserRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__GroupAddUserRequest);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__GroupAddUserRequest ** SOAP_FMAC4 soap_in_PointerTo_ns2__GroupAddUserRequest(struct soap *soap, const char *tag, _ns2__GroupAddUserRequest **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__GroupAddUserRequest **)soap_malloc(soap, sizeof(_ns2__GroupAddUserRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__GroupAddUserRequest *)soap_instantiate__ns2__GroupAddUserRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns2__GroupAddUserRequest ** p = (_ns2__GroupAddUserRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__GroupAddUserRequest, sizeof(_ns2__GroupAddUserRequest), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__GroupAddUserRequest(struct soap *soap, _ns2__GroupAddUserRequest *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__GroupAddUserRequest);
	if (soap_out_PointerTo_ns2__GroupAddUserRequest(soap, tag?tag:"ns2:GroupAddUserRequest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__GroupAddUserRequest ** SOAP_FMAC4 soap_get_PointerTo_ns2__GroupAddUserRequest(struct soap *soap, _ns2__GroupAddUserRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__GroupAddUserRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__GroupDeletionResponse(struct soap *soap, _ns2__GroupDeletionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__GroupDeletionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__GroupDeletionResponse(struct soap *soap, const char *tag, int id, _ns2__GroupDeletionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__GroupDeletionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__GroupDeletionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns2__GroupDeletionResponse(struct soap *soap, const char *tag, _ns2__GroupDeletionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__GroupDeletionResponse **)soap_malloc(soap, sizeof(_ns2__GroupDeletionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__GroupDeletionResponse *)soap_instantiate__ns2__GroupDeletionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns2__GroupDeletionResponse ** p = (_ns2__GroupDeletionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__GroupDeletionResponse, sizeof(_ns2__GroupDeletionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__GroupDeletionResponse(struct soap *soap, _ns2__GroupDeletionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__GroupDeletionResponse);
	if (soap_out_PointerTo_ns2__GroupDeletionResponse(soap, tag?tag:"ns2:GroupDeletionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__GroupDeletionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns2__GroupDeletionResponse(struct soap *soap, _ns2__GroupDeletionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__GroupDeletionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__GroupDeletionRequest(struct soap *soap, _ns2__GroupDeletionRequest *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__GroupDeletionRequest))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__GroupDeletionRequest(struct soap *soap, const char *tag, int id, _ns2__GroupDeletionRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__GroupDeletionRequest);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__GroupDeletionRequest ** SOAP_FMAC4 soap_in_PointerTo_ns2__GroupDeletionRequest(struct soap *soap, const char *tag, _ns2__GroupDeletionRequest **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__GroupDeletionRequest **)soap_malloc(soap, sizeof(_ns2__GroupDeletionRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__GroupDeletionRequest *)soap_instantiate__ns2__GroupDeletionRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns2__GroupDeletionRequest ** p = (_ns2__GroupDeletionRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__GroupDeletionRequest, sizeof(_ns2__GroupDeletionRequest), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__GroupDeletionRequest(struct soap *soap, _ns2__GroupDeletionRequest *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__GroupDeletionRequest);
	if (soap_out_PointerTo_ns2__GroupDeletionRequest(soap, tag?tag:"ns2:GroupDeletionRequest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__GroupDeletionRequest ** SOAP_FMAC4 soap_get_PointerTo_ns2__GroupDeletionRequest(struct soap *soap, _ns2__GroupDeletionRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__GroupDeletionRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__GroupCreationResponse(struct soap *soap, _ns2__GroupCreationResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__GroupCreationResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__GroupCreationResponse(struct soap *soap, const char *tag, int id, _ns2__GroupCreationResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__GroupCreationResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__GroupCreationResponse ** SOAP_FMAC4 soap_in_PointerTo_ns2__GroupCreationResponse(struct soap *soap, const char *tag, _ns2__GroupCreationResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__GroupCreationResponse **)soap_malloc(soap, sizeof(_ns2__GroupCreationResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__GroupCreationResponse *)soap_instantiate__ns2__GroupCreationResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns2__GroupCreationResponse ** p = (_ns2__GroupCreationResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__GroupCreationResponse, sizeof(_ns2__GroupCreationResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__GroupCreationResponse(struct soap *soap, _ns2__GroupCreationResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__GroupCreationResponse);
	if (soap_out_PointerTo_ns2__GroupCreationResponse(soap, tag?tag:"ns2:GroupCreationResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__GroupCreationResponse ** SOAP_FMAC4 soap_get_PointerTo_ns2__GroupCreationResponse(struct soap *soap, _ns2__GroupCreationResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__GroupCreationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__GroupCreationRequest(struct soap *soap, _ns2__GroupCreationRequest *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__GroupCreationRequest))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__GroupCreationRequest(struct soap *soap, const char *tag, int id, _ns2__GroupCreationRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__GroupCreationRequest);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__GroupCreationRequest ** SOAP_FMAC4 soap_in_PointerTo_ns2__GroupCreationRequest(struct soap *soap, const char *tag, _ns2__GroupCreationRequest **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__GroupCreationRequest **)soap_malloc(soap, sizeof(_ns2__GroupCreationRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__GroupCreationRequest *)soap_instantiate__ns2__GroupCreationRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns2__GroupCreationRequest ** p = (_ns2__GroupCreationRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__GroupCreationRequest, sizeof(_ns2__GroupCreationRequest), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__GroupCreationRequest(struct soap *soap, _ns2__GroupCreationRequest *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__GroupCreationRequest);
	if (soap_out_PointerTo_ns2__GroupCreationRequest(soap, tag?tag:"ns2:GroupCreationRequest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__GroupCreationRequest ** SOAP_FMAC4 soap_get_PointerTo_ns2__GroupCreationRequest(struct soap *soap, _ns2__GroupCreationRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__GroupCreationRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__UserCreationResponse(struct soap *soap, _ns2__UserCreationResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__UserCreationResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__UserCreationResponse(struct soap *soap, const char *tag, int id, _ns2__UserCreationResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__UserCreationResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__UserCreationResponse ** SOAP_FMAC4 soap_in_PointerTo_ns2__UserCreationResponse(struct soap *soap, const char *tag, _ns2__UserCreationResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__UserCreationResponse **)soap_malloc(soap, sizeof(_ns2__UserCreationResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__UserCreationResponse *)soap_instantiate__ns2__UserCreationResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns2__UserCreationResponse ** p = (_ns2__UserCreationResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__UserCreationResponse, sizeof(_ns2__UserCreationResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__UserCreationResponse(struct soap *soap, _ns2__UserCreationResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__UserCreationResponse);
	if (soap_out_PointerTo_ns2__UserCreationResponse(soap, tag?tag:"ns2:UserCreationResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__UserCreationResponse ** SOAP_FMAC4 soap_get_PointerTo_ns2__UserCreationResponse(struct soap *soap, _ns2__UserCreationResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__UserCreationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__UserCreationRequest(struct soap *soap, _ns2__UserCreationRequest *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__UserCreationRequest))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__UserCreationRequest(struct soap *soap, const char *tag, int id, _ns2__UserCreationRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__UserCreationRequest);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__UserCreationRequest ** SOAP_FMAC4 soap_in_PointerTo_ns2__UserCreationRequest(struct soap *soap, const char *tag, _ns2__UserCreationRequest **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__UserCreationRequest **)soap_malloc(soap, sizeof(_ns2__UserCreationRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__UserCreationRequest *)soap_instantiate__ns2__UserCreationRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns2__UserCreationRequest ** p = (_ns2__UserCreationRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__UserCreationRequest, sizeof(_ns2__UserCreationRequest), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__UserCreationRequest(struct soap *soap, _ns2__UserCreationRequest *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__UserCreationRequest);
	if (soap_out_PointerTo_ns2__UserCreationRequest(soap, tag?tag:"ns2:UserCreationRequest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__UserCreationRequest ** SOAP_FMAC4 soap_get_PointerTo_ns2__UserCreationRequest(struct soap *soap, _ns2__UserCreationRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__UserCreationRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__UserDeletionResponse(struct soap *soap, _ns2__UserDeletionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__UserDeletionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__UserDeletionResponse(struct soap *soap, const char *tag, int id, _ns2__UserDeletionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__UserDeletionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__UserDeletionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns2__UserDeletionResponse(struct soap *soap, const char *tag, _ns2__UserDeletionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__UserDeletionResponse **)soap_malloc(soap, sizeof(_ns2__UserDeletionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__UserDeletionResponse *)soap_instantiate__ns2__UserDeletionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns2__UserDeletionResponse ** p = (_ns2__UserDeletionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__UserDeletionResponse, sizeof(_ns2__UserDeletionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__UserDeletionResponse(struct soap *soap, _ns2__UserDeletionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__UserDeletionResponse);
	if (soap_out_PointerTo_ns2__UserDeletionResponse(soap, tag?tag:"ns2:UserDeletionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__UserDeletionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns2__UserDeletionResponse(struct soap *soap, _ns2__UserDeletionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__UserDeletionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__UserDeletionRequest(struct soap *soap, _ns2__UserDeletionRequest *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__UserDeletionRequest))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__UserDeletionRequest(struct soap *soap, const char *tag, int id, _ns2__UserDeletionRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__UserDeletionRequest);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__UserDeletionRequest ** SOAP_FMAC4 soap_in_PointerTo_ns2__UserDeletionRequest(struct soap *soap, const char *tag, _ns2__UserDeletionRequest **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__UserDeletionRequest **)soap_malloc(soap, sizeof(_ns2__UserDeletionRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__UserDeletionRequest *)soap_instantiate__ns2__UserDeletionRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns2__UserDeletionRequest ** p = (_ns2__UserDeletionRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__UserDeletionRequest, sizeof(_ns2__UserDeletionRequest), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__UserDeletionRequest(struct soap *soap, _ns2__UserDeletionRequest *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__UserDeletionRequest);
	if (soap_out_PointerTo_ns2__UserDeletionRequest(soap, tag?tag:"ns2:UserDeletionRequest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__UserDeletionRequest ** SOAP_FMAC4 soap_get_PointerTo_ns2__UserDeletionRequest(struct soap *soap, _ns2__UserDeletionRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__UserDeletionRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__UserInfo(struct soap *soap, _ns2__UserInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__UserInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__UserInfo(struct soap *soap, const char *tag, int id, _ns2__UserInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__UserInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__UserInfo ** SOAP_FMAC4 soap_in_PointerTo_ns2__UserInfo(struct soap *soap, const char *tag, _ns2__UserInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__UserInfo **)soap_malloc(soap, sizeof(_ns2__UserInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__UserInfo *)soap_instantiate__ns2__UserInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns2__UserInfo ** p = (_ns2__UserInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__UserInfo, sizeof(_ns2__UserInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__UserInfo(struct soap *soap, _ns2__UserInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__UserInfo);
	if (soap_out_PointerTo_ns2__UserInfo(soap, tag?tag:"ns2:UserInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__UserInfo ** SOAP_FMAC4 soap_get_PointerTo_ns2__UserInfo(struct soap *soap, _ns2__UserInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__UserInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__UserInfoRequest(struct soap *soap, _ns2__UserInfoRequest *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__UserInfoRequest))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__UserInfoRequest(struct soap *soap, const char *tag, int id, _ns2__UserInfoRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__UserInfoRequest);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns2__UserInfoRequest ** SOAP_FMAC4 soap_in_PointerTo_ns2__UserInfoRequest(struct soap *soap, const char *tag, _ns2__UserInfoRequest **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__UserInfoRequest **)soap_malloc(soap, sizeof(_ns2__UserInfoRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__UserInfoRequest *)soap_instantiate__ns2__UserInfoRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns2__UserInfoRequest ** p = (_ns2__UserInfoRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__UserInfoRequest, sizeof(_ns2__UserInfoRequest), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__UserInfoRequest(struct soap *soap, _ns2__UserInfoRequest *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__UserInfoRequest);
	if (soap_out_PointerTo_ns2__UserInfoRequest(soap, tag?tag:"ns2:UserInfoRequest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__UserInfoRequest ** SOAP_FMAC4 soap_get_PointerTo_ns2__UserInfoRequest(struct soap *soap, _ns2__UserInfoRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__UserInfoRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap *soap, const std::vector<std::string >*a)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string >*a, const char *type)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfstd__string(soap, -1)))
		return NULL;
	std::string n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		soap_default_std__string(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_std__string, SOAP_TYPE_std__vectorTemplateOfstd__string, sizeof(std::string), 0))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else
		{
			if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfstd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<std::string >);
		if (size)
			*size = sizeof(std::vector<std::string >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<std::string >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<std::string >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<std::string >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<std::string > %p -> %p\n", q, p));
	*(std::vector<std::string >*)p = *(std::vector<std::string >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
